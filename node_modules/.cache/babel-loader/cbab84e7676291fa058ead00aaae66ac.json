{"ast":null,"code":"/**\n * ## Imports\n *\n * The actions supported\n */\nvar InitialState = require(\"./initialState\").default;\n\nvar _require$default = require(\"../../constants/Customer\").default,\n    ON_FORM_FIELD_CHANGE = _require$default.ON_FORM_FIELD_CHANGE,\n    CUSTOMER_SUCCESS = _require$default.CUSTOMER_SUCCESS;\n\nvar initialState = new InitialState();\n/**\n * ## Customer Reducer function\n * @param {Object} state - initialState\n * @param {Object} action - type and payload\n */\n\nexport default function customerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  if (!(state instanceof InitialState)) return initialState.merge(state);\n\n  switch (action.type) {\n    case CUSTOMER_SUCCESS:\n      return state.setIn([\"form\", \"fields\", \"data\"], action.payload).setIn([\"form\", \"isFetching\"], false);\n\n    case CUSTOMER_REQUEST:\n      return state.setIn([\"form\", \"isFetching\"], true);\n\n    case ON_FORM_FIELD_CHANGE:\n      var _action$payload = action.payload,\n          field = _action$payload.field,\n          value = _action$payload.value;\n      return state.setIn([\"form\", \"fields\", field], value);\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/macoybayona/Documents/MyProjects/Examination/src/reducers/customer/reducer.js"],"names":["InitialState","require","default","ON_FORM_FIELD_CHANGE","CUSTOMER_SUCCESS","initialState","customerReducer","state","action","merge","type","setIn","payload","CUSTOMER_REQUEST","field","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,OAA/C;;AAEA,uBAGID,OAAO,CAAC,0BAAD,CAAP,CAAoCC,OAHxC;AAAA,IACEC,oBADF,oBACEA,oBADF;AAAA,IAEEC,gBAFF,oBAEEA,gBAFF;;AAKA,IAAMC,YAAY,GAAG,IAAIL,YAAJ,EAArB;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASM,eAAT,GAAuD;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;AACpE,MAAI,EAAED,KAAK,YAAYP,YAAnB,CAAJ,EAAsC,OAAOK,YAAY,CAACI,KAAb,CAAmBF,KAAnB,CAAP;;AAEtC,UAAQC,MAAM,CAACE,IAAf;AACE,SAAKN,gBAAL;AACE,aAAOG,KAAK,CAACI,KAAN,CAAY,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAAZ,EAAwCH,MAAM,CAACI,OAA/C,EACJD,KADI,CACE,CAAC,MAAD,EAAS,YAAT,CADF,EAC0B,KAD1B,CAAP;;AAGF,SAAKE,gBAAL;AACE,aAAON,KAAK,CAACI,KAAN,CAAY,CAAC,MAAD,EAAS,YAAT,CAAZ,EAAoC,IAApC,CAAP;;AAEF,SAAKR,oBAAL;AACE,4BAAyBK,MAAM,CAACI,OAAhC;AAAA,UAAQE,KAAR,mBAAQA,KAAR;AAAA,UAAeC,KAAf,mBAAeA,KAAf;AACA,aAAOR,KAAK,CAACI,KAAN,CAAY,CAAC,MAAD,EAAS,QAAT,EAAmBG,KAAnB,CAAZ,EAAuCC,KAAvC,CAAP;;AAEF;AACE;AAbJ;;AAgBA,SAAOR,KAAP;AACD","sourcesContent":["/**\n * ## Imports\n *\n * The actions supported\n */\nconst InitialState = require(\"./initialState\").default;\n\nconst {\n  ON_FORM_FIELD_CHANGE,\n  CUSTOMER_SUCCESS\n} = require(\"../../constants/Customer\").default;\n\nconst initialState = new InitialState();\n\n/**\n * ## Customer Reducer function\n * @param {Object} state - initialState\n * @param {Object} action - type and payload\n */\n\nexport default function customerReducer(state = initialState, action) {\n  if (!(state instanceof InitialState)) return initialState.merge(state);\n\n  switch (action.type) {\n    case CUSTOMER_SUCCESS:\n      return state.setIn([\"form\", \"fields\", \"data\"], action.payload)\n        .setIn([\"form\", \"isFetching\"], false);\n\n    case CUSTOMER_REQUEST:\n      return state.setIn([\"form\", \"isFetching\"], true);    \n\n    case ON_FORM_FIELD_CHANGE:\n      const { field, value } = action.payload;\n      return state.setIn([\"form\", \"fields\", field], value);\n\n    default:\n      break;\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}